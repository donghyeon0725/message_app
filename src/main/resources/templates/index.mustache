<!DOCTYPE html>
<html>
<head>
  <title>Messages App</title>
  <style>
    [v-cloak] {display: none;}
    body > div {width: 500px; margin: 0 auto;}
    textarea {width: 100%;}
    ul {padding: 0 15px;}
  </style>
</head>
<!--
1. v-cloak 속성을 주고 display: none 으로 보간법을 가릴 수 있다.
2. @submit.prevent 으로 기본 속성을 막으면서 submit 이벤트를 부착할 수 있다.
3. v-on:delete 등으로 이벤트를 달 수 있다. 설탕 표기법은 @delete 이다.
4. v-model 으로 양방향 바인딩을 했다.
-->
<body>
  <div id="app" v-cloak>
    <message-list :items="messages" @delete="deleteMessage" @update="updateMessage"></message-list>
    <form @submit.prevent="addMessage">
      <textarea id="newMessage" v-model="newMessage" placeholder="Leave a message" v-focus></textarea>
      <div>
          <button :disabled="addDisabled" type="submit">Add</button>
      </div>
    </form>
  </div>
  <script src="../vue.js"></script>
  <script src="../axios.v0.18.0.min.js"></script>
  <script type="module">
    import MessageList from './components/MessageList.js'
    import LifecycleLogger from './plugins/lifecycle-logger.plugin.js'
    import './directives/focus.directive.js'
    import './filters/datetime.filter.js'

    /**
     * 확장 플러그인을 사용하기 위함
     * vm 인스턴스를 생성하기 전에 호출해야함
     * */
    Vue.use(LifecycleLogger, {beforeMount: false})

    // 모듈을 window 에 밖아 놓은 이유는..?
    window.vm = new Vue({
      el: '#app',
      name: 'MessagesApp',
      data: {
        messages: [],
        newMessage: ''
      },
      computed: {
        addDisabled () {
          return this.messages.length >= 10 || this.newMessage.length > 50
        }
      },
      components: {
        MessageList
      },
      created () {
        /**
         * axios을 사용해서 프로미스 패턴으로 api를 호출하고 있다.
         * this 키워드는 자신의 인스턴스의 data 프로퍼티에 접근하는 것이다.
         * response 는 서버가 리턴하는 값이다.
         * */
        axios.get('api/messages?_=' + new Date().getTime())
        .then((response) => {
          this.messages = response.data
        })
        .catch((error) => {
          console.log('Failed to get messages' + error);
        });
      },
      methods: {
        addMessage (event) {
          if (!this.newMessage) return

          /**
           * 값은 두번 째 인자로 넘겨준다.
           *
           * this.messages.push(response.data) 처럼 객체의 값만 변경하면 자동으로 재 랜더링 한다.
           * */
          axios.post('api/messages', {text: this.newMessage})
          .then((response) => {
            this.messages.push(response.data)
            this.newMessage = ''
          })
          .catch((error) => {
            console.log(error);
          });
        },
        deleteMessage (message) {
            /**
             * delete 메소드는 withCredentials 옵션이 필요하다. 이 때 withCredentials 은 에러정보에 관련한 것이다.
             * 한편 데이터를 넘겨줄 때는 data 프로퍼티를 이용해서 넘겨줘야 한다.
             * 받은 message 객체의 값을 이용하고 있음에 주의한다.
             * */
            axios.delete('api/messages', {
                data: {
                    id: message.id
                },
                withCredentials: true
            })
            .then((response) => {
                this.messages.splice(this.messages.indexOf(message), 1)
            })
            .catch((error) => {
                console.log(error);
            })

        },
        updateMessage (message) {
            /**
             * put은 업데이트가 일어날 때 사용하는 프로토콜이다.
             * this.messages.find 를 통해, 자식 모듈에서 부터 받은 키(id) 값으로 자신 객체를 찾아 서버에 넘기고 있다.
             * */
            axios.put('api/messages', this.messages.find(e => e.id == message.id))
            .then((response) => {
                console.log("update complete");
            })
            .catch((error) => {
                console.log(error);
            })
        }
      }
    })
      /**
       *  $data 라는 별도 저장 공간에 _data를 바라보고 있는 인스턴스가 가득하다.
       * */
      setInterval(() => {
          console.log(window.vm.$data)
      }, 5000);
  </script>
</body>
</html>
